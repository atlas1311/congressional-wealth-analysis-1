head(income_total)
income <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income_total <- income[,1:7]
names(income_total) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
income_total$med_min <- income_total$med_income - income_total$med_income_moe
income_total$med_max <- income_total$med_income + income_total$med_income_moe
head(income_total)
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
rename_dataset <- function(dataset){
names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
}
head(income_total)
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
rename_dataset <- function(dataset){
names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
}
income2013
names(income2013)
rename_dataset(income2013)
names(income2013)
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
rename_dataset <- function(dataset){
dataset = names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
return dataset
}
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
rename_dataset <- function(dataset){
dataset <- names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
return dataset
}
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
rename_dataset <- function(dataset){
dataset <- dataset[,1:7]
names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
return dataset
}
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
cut_dataset <- function(dataset) {
head(dataset)
}
rename_dataset <- function(dataset) {
dataset <- dataset[,1:7]
names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
return dataset
}
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
cut_dataset <- function(dataset) {
head(dataset)
}
# rename_dataset <- function(dataset) {
#   dataset <- dataset[,1:7]
#   names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
#   return dataset
# }
cut_dataset(income2013)
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
cut_dataset <- function(dataset) {
dataset <- dataset[,1:7]
head(dataset)
return dataset
}
# rename_dataset <- function(dataset) {
#   dataset <- dataset[,1:7]
#   names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
#   return dataset
# }
income2013 <- cut_dataset(income2013)
head(income2013)
a_income2013 <- cut_dataset(income2013)
a
a_income2013
x = income2013[,1:7]
head(x)
x <- income2013[,1:7]
x
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
cut_dataset <- function(dataset) {
new_dataset <- dataset[,1:7]
return new_dataset
}
# rename_dataset <- function(dataset) {
#   dataset <- dataset[,1:7]
#   names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
#   return dataset
# }
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
cut_dataset <- function(dataset) {
new_dataset <- dataset[,1:7]
return(new_dataset)
}
# rename_dataset <- function(dataset) {
#   dataset <- dataset[,1:7]
#   names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
#   return dataset
# }
x <- income2013[,1:7]
a_income2013 <- cut_dataset(income2013)
head(a_income2013)
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
cut_dataset <- function(dataset) {
new_dataset <- dataset[,1:7]
return(new_dataset)
}
rename_dataset <- function(dataset) {
names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
return(dataset)
}
prepare_dataset <- function(dataset) {
smaller_dataset <- cut_dataset(dataset)
renamed_dataset <- rename_dataset(smaller_dataset)
return(renamed_dataset)
}
prepared_income2008 <- prepare_dataset(income2008)
prepared_income2013 <- prepare_dataset(income2013)
prepared_income2013
names(prepared_income2013)
income2008 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_08_3YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
income2013 <- read.csv("http://datasets.flowingdata.com/tuts/2015/load-data/ACS_13_5YR_S1903.csv",
stringsAsFactors=FALSE, sep=",", colClasses=c("GEO.id2"="character"))
cut_dataset <- function(dataset) {
new_dataset <- dataset[,1:7]
return(new_dataset)
}
rename_dataset <- function(dataset) {
names(dataset) <- c("id", "FIPS", "name", "households", "households_moe", "med_income", "med_income_moe")
return(dataset)
}
prepare_dataset <- function(dataset) {
smaller_dataset <- cut_dataset(dataset)
renamed_dataset <- rename_dataset(smaller_dataset)
return(renamed_dataset)
}
prepared_income2008 <- prepare_dataset(income2008)
prepared_income2013 <- prepare_dataset(income2013)
income20082013 < merge(prepared_income2008, prepared_income2013, by="FIPS")
dim(USArrests)
head(USArrests)
x <-
USArrests
x
rownames(x)
rownames(x)[9]
abbreviate(rownames(x))
y <- abbreviate(rownames(x))
head(y)
y <- abbreviate(rownames(x), maxlength=2)
y <- abbreviate(rownames(x), minlength=2)
head(y)
state_chars <- nchar(x)
state_chars[1]
nchars(x)
nchar
nchar(x)
y
states = rownames(x)
states
state_chars <- nchar(x)
state_chars
state_chars <- nchar(states)
state_chars
max(state_chars)
which(state_chars == max(state_chars))
states[33[]]
tolower(states)
grep(pattern = "[wW]", x = states)
grep(pattern = "[wW]", x = states, value=TRUE)
grep(pattern = "w", x = states, value=TRUE, ignore.case=TRUE)
hist(nchar(states))
hist(nchar(states), main = "Histogram", xlab="yo", ylab="dude")
states <- rownames(USArrests)
vowels <- c("a", "e", "i", "o", "u")
num_vowels <- []
for (j in seq_along(vowels) {
vowel_pos <- grepexpr(pattern = vowels[j], text = states, ignore.case = TRUE)
vowel_num <- sapply(vowel_pos, function(x) ifelse(x[1] > 0, length(x), 0))
num_vowels[j] = sum(vowel_num)
}
states <- rownames(USArrests)
vowels <- c("a", "e", "i", "o", "u")
num_vowels <- []
for (j in seq_along(vowels)) {
vowel_pos <- grepexpr(pattern = vowels[j], text = states, ignore.case = TRUE)
vowel_num <- sapply(vowel_pos, function(x) ifelse(x[1] > 0, length(x), 0))
num_vowels[j] = sum(vowel_num)
}
gregexpr
states <- rownames(USArrests)
vowels <- c("a", "e", "i", "o", "u")
num_vowels <- []
for (j in seq_along(vowels)) {
vowel_pos <- gregexpr(pattern = vowels[j], text = states, ignore.case = TRUE)
vowel_num <- sapply(vowel_pos, function(x) ifelse(x[1] > 0, length(x), 0))
num_vowels[j] = sum(vowel_num)
}
states <- rownames(USArrests)
vowels <- c("a", "e", "i", "o", "u")
num_vowels <- vector()
for (j in seq_along(vowels)) {
vowel_pos <- gregexpr(pattern = vowels[j], text = states, ignore.case = TRUE)
vowel_num <- sapply(vowel_pos, function(x) ifelse(x[1] > 0, length(x), 0))
num_vowels[j] = sum(vowel_num)
}
num_vowels
states <- rownames(USArrests)
vowels <- c("a", "e", "i", "o", "u")
num_vowels <- vector()
for (j in seq_along(vowels)) {
vowel_pos <- gregexpr(pattern = vowels[j], text = states, ignore.case = TRUE)
vowel_num <- sapply(vowel_pos, function(x) ifelse(x[1] > 0, length(x), 0))
num_vowels[j] = sum(vowel_num)
}
barplot(num_vowels)
states <- rownames(USArrests)
vowels <- c("a", "e", "i", "o", "u")
num_vowels <- vector()
for (j in seq_along(vowels)) {
vowel_pos <- gregexpr(pattern = vowels[j], text = states, ignore.case = TRUE)
vowel_num <- sapply(vowel_pos, function(x) ifelse(x[1] > 0, length(x), 0))
num_vowels[j] = sum(vowel_num)
}
barplot(num_vowels, main = "Number of vowels in US State names", ylim = c(0,80))
states <- rownames(USArrests)
vowels <- c("a", "e", "i", "o", "u")
num_vowels <- vector()
for (j in seq_along(vowels)) {
vowel_pos <- gregexpr(pattern = vowels[j], text = states, ignore.case = TRUE)
vowel_num <- sapply(vowel_pos, function(x) ifelse(x[1] > 0, length(x), 0))
num_vowels[j] = sum(vowel_num)
}
names(num_vowels) <- vowels
barplot(num_vowels, main = "Number of vowels in US State names", ylim = c(0,80))
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('data', fileName, sep='/')
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
#congressIncomes <- NULL
#for (i in 1:length(years)) {
#  congressIncomes[i] <- readYearData(years[i])
#}
congressIncomes <- readYearData(years)
print(length(congressIncomes))
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('data', fileName, sep='/')
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- NULL
for (i in 1:length(years)) {
congressIncomes[i] <- readYearData(years[i])
}
print(length(congressIncomes))
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('data', fileName, sep='/')
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- vector()
for (i in 1:length(years)) {
congressIncomes[i] <- readYearData(years[i])
}
print(length(congressIncomes))
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('data', fileName, sep='/')
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- vector()
for (i in 1:length(years)) {
print("year: ", years[i])
congressIncomes[i] <- readYearData(years[i])
}
print(length(congressIncomes))
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('data', fileName, sep='/')
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- vector()
for (i in 1:length(years)) {
print(cat("i", i))
congressIncomes[i] <- readYearData(years[i])
}
print(length(congressIncomes))
years
length(years)
for (i in 1:length(years)) {}
for (i in 1:length(years)) {
print(i)
}
yeras
years
years[1]
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('data', fileName, sep='/')
print(filePath)
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- vector()
for (i in 1:length(years)) {
print(cat("i", i))
congressIncomes[i] <- readYearData(years[i])
}
print(length(congressIncomes))
x <- read.csv('data/2004.csv')
x <- read.csv('./data/2004.csv')
x <- read.csv("data/2004.csv")
x <- read.csv("~/code/congress-wealth-indicator/data/2004.csv")
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('./data', fileName, sep='/')
print(filePath)
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- vector()
for (i in 1:length(years)) {
print(cat("i", i))
congressIncomes[i] <- readYearData(years[i])
}
print(length(congressIncomes))
getwd()
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('code/congress-wealth-indicator/data', fileName, sep='/')
print(filePath)
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- vector()
for (i in 1:length(years)) {
print(cat("i", i))
congressIncomes[i] <- readYearData(years[i])
}
print(length(congressIncomes))
readYearData <- function(year) {
fileName <- paste(year, 'csv', sep='.')
filePath <- paste('code/congress-wealth-indicator/data', fileName, sep='/')
yearData <- read.csv(filePath)
return(yearData)
}
years <- c('2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013')
congressIncomes <- vector()
for (i in 1:length(years)) {
congressIncomes[i] <- readYearData(years[i])
}
warnings()
congressIncomes
rownames(congressIncomes[0])
x <- congressIncomes[1]
rownames(x)
head(x)
names(x)
setwd(paste(getwd(), "code", "congress-wealth-indicator", "data", sep = "/"))
######### Necessary packages ##############
y(years, read.csv))
# the difference in system.time() for the two methods is a measly .048 seconds, however lapply seems to be dealing with the numerics better for some reason
###########################################
############ Have a look ##################
#head(congressIncomes)
#str(congressIncomes)
congressIncomes[, 3:5] <- sapply(congressIncomes[, 3:5], as.numeric)
colnames(congressIncomes)
#head(congressIncomes)
summary(congressIncomes$AvgValue)
###########################################
# So some things to consider: I think the "Name" variable needs to be split. Name should be a seperate case, Party affiliation should be a seperate case,
# and so should their home state. This would allow for another few layers of analysis (visualizing by state and party). Not sure what the "Source" column is.
# Looks like all NAs, so I'd drop it all together.  My thought on plotting this would be to start global and then go local. Visualize the global distribution of wealth by party,
# then by state, then by district (is that what the cid variable is? I couldn't tell...a quick google search didn't turn up any documentation for this one).
############## Add in the 'Party' variable #####################################
congressIncomes$Name <- as.character(congressIncomes$Name)
for (i in 1:nrow(congressIncomes)) {
if (grepl(pattern = "D\\-", congressIncomes$Name[i]) == TRUE) {
congressIncomes$Party[i] = "D"
} else if (grepl(pattern = "R\\-", congressIncomes$Name[i]) == TRUE) {
congressIncomes$Party[i] = "R"
} else {
congressIncomes$Party[i] = "I"
}
}
# remove rows that represent the exeutive and judiciary
for (i in 1:nrow(congressIncomes)) {
if (!is.na(congressIncomes$chamber[i])) {
if ((congressIncomes$chamber[i] == "E") | (congressIncomes$chamber[i] == "J")) {
congressIncomes[-(i),]
}
}
}
################################################################################
######################## Split off names in 'Name' and add seperate variable for 'State' #############################################################
congressIncomes <- data.frame(congressIncomes, colsplit(congressIncomes$Name, pattern = " \\(", names = c("Names", "State")))
head(congressIncomes)
# Next step will be to drop the Party ID and cleanup state remnants
congressIncomes$State <- sub(pattern = "[D, R, I]\\-", replacement = "", x = congressIncomes$State)
congressIncomes$State <- sub(pattern = ")", replacement = "", x = congressIncomes$State)
# Drop columns Source and Name as we no longer need that data
congressIncomes$Name <- NULL
congressIncomes$Source <- NULL
# Rename Names column back to nicer sounding Name
colnames(congressIncomes)[9] <- "Name"
######### Necessary packages ##############
library(plyr)
library(data.table)
library(reshape2)
###########################################
###### Dev set up related functions #######
# For Jeremia
#setwd(paste(getwd(), "code", "congress-wealth-indicator", "data", sep = "/"))
############# Read in the Data ############
years <- list.files(pattern = ".csv")
congressIncomes <- data.frame()
# lapply
congressIncomes <- do.call(rbind, lapply(years, read.csv))
# the difference in system.time() for the two methods is a measly .048 seconds, however lapply seems to be dealing with the numerics better for some reason
###########################################
############ Have a look ##################
#head(congressIncomes)
#str(congressIncomes)
congressIncomes[, 3:5] <- sapply(congressIncomes[, 3:5], as.numeric)
colnames(congressIncomes)
#head(congressIncomes)
summary(congressIncomes$AvgValue)
###########################################
# So some things to consider: I think the "Name" variable needs to be split. Name should be a seperate case, Party affiliation should be a seperate case,
# and so should their home state. This would allow for another few layers of analysis (visualizing by state and party). Not sure what the "Source" column is.
# Looks like all NAs, so I'd drop it all together.  My thought on plotting this would be to start global and then go local. Visualize the global distribution of wealth by party,
# then by state, then by district (is that what the cid variable is? I couldn't tell...a quick google search didn't turn up any documentation for this one).
############## Add in the 'Party' variable #####################################
congressIncomes$Name <- as.character(congressIncomes$Name)
for (i in 1:nrow(congressIncomes)) {
if (grepl(pattern = "D\\-", congressIncomes$Name[i]) == TRUE) {
congressIncomes$Party[i] = "D"
} else if (grepl(pattern = "R\\-", congressIncomes$Name[i]) == TRUE) {
congressIncomes$Party[i] = "R"
} else {
congressIncomes$Party[i] = "I"
}
}
# remove rows that represent the exeutive and judiciary
for (i in 1:nrow(congressIncomes)) {
if (!is.na(congressIncomes$chamber[i])) {
if ((congressIncomes$chamber[i] == "E") | (congressIncomes$chamber[i] == "J")) {
congressIncomes[-(i),]
}
}
}
################################################################################
######################## Split off names in 'Name' and add seperate variable for 'State' #############################################################
congressIncomes <- data.frame(congressIncomes, colsplit(congressIncomes$Name, pattern = " \\(", names = c("Names", "State")))
head(congressIncomes)
# Next step will be to drop the Party ID and cleanup state remnants
congressIncomes$State <- sub(pattern = "[D, R, I]\\-", replacement = "", x = congressIncomes$State)
congressIncomes$State <- sub(pattern = ")", replacement = "", x = congressIncomes$State)
# Drop columns Source and Name as we no longer need that data
congressIncomes$Name <- NULL
congressIncomes$Source <- NULL
# Rename Names column back to nicer sounding Name
colnames(congressIncomes)[9] <- "Name"
years <- list.files(pattern = ".csv")
congressIncomes <- data.frame()
congressIncomes <- do.call(cbind, lapply(years, read.csv))
